import os
import logging
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.units import cm
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from utils.path_utils import resource_path  # ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ resource_path ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢

# üî§ Register TH Sarabun Fonts
pdfmetrics.registerFont(TTFont('THSarabun', resource_path('resources/assets/fonts/THSarabunNew.ttf')))
pdfmetrics.registerFont(TTFont('THSarabun-Bold', resource_path('resources/assets/fonts/THSarabunNew Bold.ttf')))
pdfmetrics.registerFont(TTFont('THSarabun-Italic', resource_path('resources/assets/fonts/THSarabunNew Italic.ttf')))
pdfmetrics.registerFont(TTFont('THSarabun-BoldItalic', resource_path('resources/assets/fonts/THSarabunNew BoldItalic.ttf')))

def generate_delivery_pdf(order: dict, items: list, output_path: str):
    logging.info(f"üìÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á: {output_path}")

    c = canvas.Canvas(output_path, pagesize=A4)
    width, height = A4
    c.setTitle(f"Delivery Note - {order.get('order_no', 'unknown')}")
    c.setAuthor("‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")

    # === ‡πÇ‡∏•‡πÇ‡∏Å‡πâ ===
    logo_path = resource_path("resources/assets/logo.png")
    if os.path.exists(logo_path):
        try:
            c.drawImage(logo_path, width - 6 * cm, height - 3.5 * cm,
                        width=5 * cm, preserveAspectRatio=True, mask='auto')
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ: {e}")

    # === ‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á ===
    c.setFont("THSarabun-Bold", 20)
    c.drawString(2 * cm, height - 2.5 * cm, "‡πÉ‡∏ö‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á / Delivery Note")

    # === ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ===
    c.setFont("THSarabun", 16)
    c.drawString(2 * cm, height - 4 * cm, f"‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: {order.get('order_no', '-')}")
    c.drawString(2 * cm, height - 4.8 * cm, f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {datetime.today().strftime('%d/%m/%Y')}")

    # === ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ===
    customer = order.get("customer", {})
    y = height - 6.2 * cm
    c.drawString(2 * cm, y, f"‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {customer.get('name', '-')}")
    c.drawString(2 * cm, y - 0.8 * cm, f"‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: {customer.get('address', '-')}")
    c.drawString(2 * cm, y - 1.6 * cm, f"‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: {customer.get('phone', '-')}")

    # === ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ===
    y = y - 3 * cm
    table_y = y
    c.setFont("THSarabun-Bold", 16)
    c.drawString(2 * cm, table_y, "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")

    table_y -= 1.2 * cm
    c.setFont("THSarabun-Bold", 14)
    c.drawString(2 * cm, table_y, "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
    c.drawString(10 * cm, table_y, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô")

    # ‡πÄ‡∏™‡πâ‡∏ô‡∏ö‡∏ô
    c.line(2 * cm, table_y - 0.2 * cm, width - 2 * cm, table_y - 0.2 * cm)

    c.setFont("THSarabun", 14)
    table_y -= 1 * cm
    for item in items:
        c.drawString(2 * cm, table_y, item["product"])
        c.drawString(10 * cm, table_y, str(item["qty"]))
        table_y -= 0.8 * cm

    # ‡πÄ‡∏™‡πâ‡∏ô‡∏•‡πà‡∏≤‡∏á
    c.line(2 * cm, table_y + 0.6 * cm, width - 2 * cm, table_y + 0.6 * cm)

    # === ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ===
    table_y -= 2 * cm
    c.setFont("THSarabun", 14)
    c.drawString(2 * cm, table_y, "..............................................................")
    c.drawString(2 * cm, table_y - 0.8 * cm, "‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á / Receiver")

    c.drawString(11 * cm, table_y, "..........................................................")
    c.drawString(11 * cm, table_y - 0.8 * cm, "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡πá‡∏ô‡∏£‡∏±‡∏ö / Received Date")

    # === ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå ===
    c.showPage()
    c.save()
    logging.info(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {output_path}")
