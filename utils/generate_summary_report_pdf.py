import os
import logging
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.units import cm
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from utils.path_utils import resource_path

# ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ü‡∏≠‡∏ô‡∏ï‡πå TH Sarabun (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô)
pdfmetrics.registerFont(TTFont('THSarabun', resource_path('resources/assets/fonts/THSarabunNew.ttf')))
pdfmetrics.registerFont(TTFont('THSarabun-Bold', resource_path('resources/assets/fonts/THSarabunNew Bold.ttf')))
pdfmetrics.registerFont(TTFont('THSarabun-Italic', resource_path('resources/assets/fonts/THSarabunNew Italic.ttf')))
pdfmetrics.registerFont(TTFont('THSarabun-BoldItalic', resource_path('resources/assets/fonts/THSarabunNew BoldItalic.ttf')))

def generate_summary_report_pdf(start_date: str, end_date: str, orders: list, output_path: str):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ ‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô

    :param start_date: ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 'YYYY-MM-DD'
    :param end_date: ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 'YYYY-MM-DD'
    :param orders: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß [{'order_no':..., 'total_amount':..., 'payment_complete_date':...}, ...]
    :param output_path: ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    """

    logging.info(f"üìÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ: {output_path}")

    c = canvas.Canvas(output_path, pagesize=A4)
    width, height = A4

    # ‡∏´‡∏±‡∏ß‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©
    c.setFont("THSarabun-Bold", 18)
    c.drawString(2 * cm, height - 2 * cm, "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ")

    # ‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
    c.setFont("THSarabun", 14)
    c.drawString(2 * cm, height - 3 * cm, f"‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {start_date} ‡∏ñ‡∏∂‡∏á {end_date}")
    c.drawString(2 * cm, height - 3.8 * cm, f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")

    # ‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    c.setFont("THSarabun-Bold", 14)
    start_y = height - 5 * cm
    c.drawString(2 * cm, start_y, "‡∏•‡∏≥‡∏î‡∏±‡∏ö")
    c.drawString(4 * cm, start_y, "‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠")
    c.drawString(14 * cm, start_y, "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô")
    c.drawRightString(20 * cm, start_y, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)")

    # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
    c.setFont("THSarabun", 14)
    y = start_y - 1 * cm
    total_income = 0
    for i, order in enumerate(orders, start=1):
        order_no = order.get('order_no', '')
        pay_date = order.get('payment_complete_date', '')
        amount = float(order.get('total_amount', 0))

        c.drawString(2 * cm, y, str(i))
        c.drawString(4 * cm, y, order_no)
        c.drawString(14 * cm, y, pay_date)
        c.drawRightString(20 * cm, y, f"{amount:,.2f}")

        total_income += amount
        y -= 1 * cm

        # ‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏á
        if y < 2 * cm:
            c.showPage()
            c.setFont("THSarabun", 14)
            y = height - 2 * cm

    # ‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    c.setFont("THSarabun-Bold", 16)
    c.drawRightString(20 * cm, y - 1 * cm, f"‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_income:,.2f} ‡∏ö‡∏≤‡∏ó")

    c.showPage()
    c.save()

    logging.info(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏ó‡∏µ‡πà: {output_path}")
